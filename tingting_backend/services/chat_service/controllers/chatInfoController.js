const Conversation = require('../models/Conversation');
const Message = require('../models/Message');

module.exports = {
    // L·∫•y th√¥ng tin nh√≥m/chat
    getChatInfo: async (req, res) => {
        console.log(`üîé L·∫•y th√¥ng tin chat`);
        try {
            const { chatId } = req.params;
            console.log(` L·∫•y th√¥ng tin chat v·ªõi ID: ${chatId}`);
            const chat = await Conversation.findById(chatId).populate('participants.userId', 'name avatar');
            if (!chat) {
                console.log(` Chat ID ${chatId} kh√¥ng t·ªìn t·∫°i`);
                return res.status(404).json({ message: 'Chat kh√¥ng t·ªìn t·∫°i' });
            }
            console.log(` D·ªØ li·ªáu chat:`, chat);
            res.json(chat);
        } catch (error) {
            console.error(` L·ªói khi l·∫•y th√¥ng tin chat:`, error);
            res.status(500).json({ error: error.message });
        }
    },
    // L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m chat (Kh√¥ng c·∫ßn thi·∫øt)
    getParticipants: async (req, res) => {
        try {
            const { chatId } = req.params;
            console.log(`L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m chat ${chatId}`);

            const chat = await Conversation.findById(chatId).populate('participants.userId', 'name avatar email');

            if (!chat) {
                console.log(`Kh√¥ng t√¨m th·∫•y nh√≥m v·ªõi ID: ${chatId}`);
                return res.status(404).json({ message: 'Nh√≥m kh√¥ng t·ªìn t·∫°i' });
            }

            console.log(`Danh s√°ch th√†nh vi√™n:`, chat.participants);
            res.json(chat.participants);
        } catch (error) {
            console.error(`L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n:`, error);
            res.status(500).json({ error: error.message });
        }
    },


    // C·∫≠p nh·∫≠t t√™n nh√≥m
    updateChatName: async (req, res) => {
        try {
            const { chatId } = req.params;
            const { name } = req.body;
            console.log(`C·∫≠p nh·∫≠t t√™n chat v·ªõi ID: ${chatId}`);
            console.log(`T√™n m·ªõi:`, name);

            const updatedChat = await Conversation.findByIdAndUpdate(chatId, { name }, { new: true });
            console.log(` Chat sau khi c·∫≠p nh·∫≠t:`, updatedChat);
            res.json(updatedChat);
        } catch (error) {
            console.error(` L·ªói khi c·∫≠p nh·∫≠t chat:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // Th√™m th√†nh vi√™n v√†o nh√≥m
    addParticipant: async (req, res) => {
        try {
            const { chatId } = req.params;
            const { userId, role } = req.body;
            console.log(` Th√™m user ${userId} v·ªõi vai tr√≤ ${role} v√†o chat ${chatId}`);
            const chat = await Conversation.findByIdAndUpdate(chatId, { $push: { participants: { userId, role } } }, { new: true });
            console.log(` Chat sau khi th√™m th√†nh vi√™n:`, chat);
            res.json(chat);
        } catch (error) {
            console.error(` L·ªói khi th√™m th√†nh vi√™n:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    removeParticipant: async (req, res) => {
        try {
            const { chatId } = req.params;
            const { userId } = req.body;

            console.log(`X√≥a user ${userId} kh·ªèi chat ${chatId}`);
            console.log("Body nh·∫≠n ƒë∆∞·ª£c:", req.body); // Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i l√™n

            // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ userId
            if (!userId) {
                return res.status(400).json({ error: "Thi·∫øu userId!" });
            }

            // X√≥a userId kh·ªèi danh s√°ch participants
            const chat = await Conversation.findByIdAndUpdate(
                chatId,
                { $pull: { participants: { userId } } },
                { new: true }
            );

            if (!chat) {
                console.error(`Kh√¥ng t√¨m th·∫•y chat v·ªõi ID: ${chatId}`);
                return res.status(404).json({ error: "Chat kh√¥ng t·ªìn t·∫°i." });
            }

            console.log(`Chat sau khi x√≥a th√†nh vi√™n:`, chat);
            res.json(chat);
        } catch (error) {
            console.error(`L·ªói khi x√≥a th√†nh vi√™n:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // Thay ƒë·ªïi vai tr√≤ c·ªßa th√†nh vi√™n
    changeParticipantRole: async (req, res) => {
        try {
            const { chatId } = req.params;
            const { userId, role } = req.body;
            console.log(`Thay ƒë·ªïi vai tr√≤ c·ªßa user ${userId} th√†nh ${role} trong chat ${chatId}`);

            const chat = await Conversation.findOneAndUpdate({ _id: chatId, 'participants.userId': userId }, { $set: { 'participants.$.role': role } }, { new: true });
            console.log(` Chat sau khi thay ƒë·ªïi vai tr√≤:`, chat);

            res.json(chat);
        } catch (error) {
            console.log(` L·ªói khi thay ƒë·ªïi vai tr√≤:`, error);

            res.status(500).json({ error: error.message });
        }
    },

    // L·∫•y danh s√°ch ·∫£nh/video ƒë√£ g·ª≠i trong nh√≥m
    getChatMedia: async (req, res) => {
        try {
            const { chatId } = req.params;
            const media = await Message.find({
                conversationId: chatId,
                messageType: { $in: ['image', 'video'] }
            });

            console.log(`L·∫•y danh s√°ch media trong chat ${chatId}:`, media);
            res.json(media.length ? media : []); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        } catch (error) {
            console.error(`L·ªói khi l·∫•y danh s√°ch media:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // L·∫•y danh s√°ch file ƒë√£ g·ª≠i trong nh√≥m
    getChatFiles: async (req, res) => {
        try {
            const { chatId } = req.params;
            const files = await Message.find({
                conversationId: chatId,
                messageType: 'file'
            });

            console.log(`L·∫•y danh s√°ch file trong chat ${chatId}:`, files);
            res.json(files.length ? files : []);
        } catch (error) {
            console.error(`L·ªói khi l·∫•y danh s√°ch file:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // L·∫•y danh s√°ch link ƒë√£ g·ª≠i trong nh√≥m
    getChatLinks: async (req, res) => {
        try {
            const { chatId } = req.params;
            const links = await Message.find({
                conversationId: chatId,
                messageType: 'link'
            });

            console.log(`L·∫•y danh s√°ch link trong chat ${chatId}:`, links);
            res.json(links.length ? links : []);
        } catch (error) {
            console.error(`L·ªói khi l·∫•y danh s√°ch link:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // L·∫•y danh s√°ch tin nh·∫Øn ƒë√£ ghim
    getPinnedMessages: async (req, res) => {
        try {
            const { chatId } = req.params;
            const pinnedMessages = await Message.find({ conversationId: chatId, 'message.isPinned': true });
            console.log(` L·∫•y danh s√°ch tin nh·∫Øn ƒë√£ ghim trong chat ${chatId}`);
            console.log(` Danh s√°ch tin nh·∫Øn ƒë√£ ghim:`, pinnedMessages);

            res.json(pinnedMessages);
        } catch (error) {
            console.log(` L·ªói khi l·∫•y danh s√°ch tin nh·∫Øn ƒë√£ ghim:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // Ghim m·ªôt tin nh·∫Øn quan tr·ªçng
    pinMessage: async (req, res) => {
        try {
            const { messageId } = req.params;
            const message = await Message.findByIdAndUpdate(messageId, { 'message.isPinned': true }, { new: true });
            console.log(` Ghim tin nh·∫Øn ${messageId}`);
            console.log(` Tin nh·∫Øn ƒë√£ ghim:`, message);

            res.json(message);
        } catch (error) {
            console.log(` L·ªói khi ghim tin nh·∫Øn:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // B·ªè ghim tin nh·∫Øn
    unpinMessage: async (req, res) => {
        try {
            const { messageId } = req.params;
            const message = await Message.findByIdAndUpdate(messageId, { 'message.isPinned': false }, { new: true });
            console.log(`üìç B·ªè ghim tin nh·∫Øn ${messageId}`);
            console.log(` Tin nh·∫Øn sau khi b·ªè ghim:`, message);

            res.json(message);
        } catch (error) {
            console.log(` L·ªói khi b·ªè ghim tin nh·∫Øn:`, error);
            res.status(500).json({ error: error.message });
        }
    },

    // L·∫•y danh s√°ch nh·∫Øc h·∫πn trong nh√≥m
    getReminders: async (req, res) => {
        try {
            const { chatId } = req.params;
            console.log(` L·∫•y danh s√°ch nh·∫Øc h·∫πn trong chat ${chatId}`);
            const reminders = await Message.find({ conversationId: chatId, 'message.messageType': 'reminder' });
            console.log(` Danh s√°ch nh·∫Øc h·∫πn:`, reminders);
            res.json(reminders);
        } catch (error) {
            console.log(` L·ªói khi l·∫•y danh s√°ch nh·∫Øc h·∫πn:`, error);
            res.status(500).json({ error: error.message });
        }
    }
};